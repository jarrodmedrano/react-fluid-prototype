//! Copyright (C) Microsoft Corporation. All rights reserved.                  

// !---------------------------------------------------------------------------
// Do not edit this file. This file is part of the core framework and is not 
// designed to be edited. Overrides to the core framework should be made in
// the corresponding file in the /app directory
// !---------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Typographic Helpers
//-----------------------------------------------------------------------------
// Sets vertical padding so that the effective line-height to font-size ratio of the last line is 1.3636.
// This prevents descender clipping when overflow: hidden is set on the element.


.setMaxLinesSimple(@maxLines, @lineHeight, @fontsize) {
    overflow: hidden;
    box-sizing: content-box;
    max-height: @maxLines * @lineHeight;
    padding-bottom: ((@fontsize * 1.3636) - @lineHeight) / 2;
}

.applyAscenderDescenderAdjustment(@applyAdjustment, @fontSize, @lineHeight) when (@applyAdjustment = true) and ((unit(@lineHeight) / unit(@fontSize)) < 1.3636) {
    @requiredLineHeight: @fontSize * 1.3636;
    @adjustmentSize: (@requiredLineHeight - @lineHeight) / 2;

    padding-bottom: @adjustmentSize;
    padding-top: @adjustmentSize;

    .setRemProperty(padding-bottom; @adjustmentSize);
    .setRemProperty(padding-top; @adjustmentSize);
}

// Wrapper mixin for .setMaxLines that allows .textbase mixins to be called without
// creating maxline classes. The mixin will apply maxlines unelss @apply is equal
// to false or 0
.applyMaxLines(@apply; @lineHeight) when not (@apply = false), (@apply = 0) {
    .setMaxLines(@lineHeight);
}

// setMaxLines: For use with .text-{foo} class definitions.
.setMaxLines(@lineHeight) {
    &.textType_maxLinesOne {
        white-space: nowrap;
        text-overflow: ellipsis;
        max-height: @lineHeight;
        .setRemProperty(max-height; @lineHeight);
    }

    &.textType_maxLinesTwo {
        max-height: 2 * @lineHeight;
        .setRemProperty(max-height, (@lineHeight * 2));
    }

    &.textType_maxLinesThree {
        max-height: 3 * @lineHeight;
        .setRemProperty(max-height, (@lineHeight * 3));
    }

    &.textType_maxLinesFour {
        max-height: 4 * @lineHeight;
        .setRemProperty(max-height, (@lineHeight * 4));
    }
}

// .setInlineMaxlines: use these when maxlines must be set on elements in a contextual scope
.setInlineMaxlines(1) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    word-wrap: normal;
}

.setInlineMaxlines(@lineHeight, @maxLines) when (@maxLines = 1) {
    max-height: @lineHeight;
    .setRemProperty(max-height, @lineHeight);
    overflow: hidden;
    white-space: nowrap;
    word-wrap: normal;
    text-overflow: ellipsis;
}

.setInlineMaxlines(@lineHeight, @maxLines) when (@maxLines > 1) {
    max-height: @maxLines * @lineHeight;
    .setRemProperty(max-height, (@maxLines * @lineHeight));
    overflow: hidden;
    white-space: normal;
    word-wrap: normal;
    text-overflow: normal;
}

// LTR / RTL supported Text Align properties
.setTextAlignLeft() {
    .applyDirectionalProperty(text-align; left; right);
}

.setTextAlignRight() {
    .applyDirectionalProperty(text-align; right; left);
}

// Remove list styling for lists
.removeListStyles() {
    .setPaddingLeft(0);
    list-style-type: none;
}


//-----------------------------------------------------------------------------
// Textbase Mixin Definitions
//-----------------------------------------------------------------------------
.textbase-headline(@applyMaxLines: false; @applyAdjustment: true) {
    font-size: @fontSizeHeadline;
    line-height: @lineHeightHeadline;

    .setRemProperty(font-size; @fontSizeHeadline);
    .setRemProperty(line-height; @lineHeightHeadline);

    .applyAscenderDescenderAdjustment(@applyAdjustment, @fontSizeHeadline, @lineHeightHeadline);

    font-weight: @fontWeightLight;
    .applyMaxLines(@applyMaxLines; @lineHeightHeadline);
}

.textbase-header(@applyMaxLines: false; @applyAdjustment: true) {
    font-size: @fontSizeHeader;
    line-height: @lineHeightHeader;


    .setRemProperty(font-size; @fontSizeHeader);
    .setRemProperty(line-height; @lineHeightHeader);

    .applyAscenderDescenderAdjustment(@applyAdjustment, @fontSizeHeader, @lineHeightHeader);

    font-weight: @fontWeightLight;
    .applyMaxLines(@applyMaxLines; @lineHeightHeader);
}

.textbase-subheader(@applyMaxLines: false; @applyAdjustment: true) {
    font-size: @fontSizeSubheader;
    line-height: @lineHeightSubheader;

    .setRemProperty(font-size; @fontSizeSubheader);
    .setRemProperty(line-height; @lineHeightSubheader);

    .applyAscenderDescenderAdjustment(@applyAdjustment, @fontSizeSubheader, @lineHeightSubheader);

    font-weight: @fontWeightLight;
    .applyMaxLines(@applyMaxLines; @lineHeightSubheader);
}

// Titles
.textbase-title(@applyMaxLines: false; @applyAdjustment: true) {
    font-size: @fontSizeTitle;
    line-height: @lineHeightTitle;

    .setRemProperty(font-size; @fontSizeTitle);
    .setRemProperty(line-height; @lineHeightTitle);

    .applyAscenderDescenderAdjustment(@applyAdjustment, @fontSizeTitle, @lineHeightTitle);

    font-weight: @fontWeightSemiLight;
    .applyMaxLines(@applyMaxLines; @lineHeightTitle);
}

.textbase-subtitle(@applyMaxLines: false; @applyAdjustment: true) {
    font-size: @fontSizeSubtitle;
    line-height: @lineHeightSubtitle;

    .setRemProperty(font-size; @fontSizeSubtitle);
    .setRemProperty(line-height; @lineHeightSubtitle);

    .applyAscenderDescenderAdjustment(@applyAdjustment, @fontSizeSubtitle, @lineHeightSubtitle);

    font-weight: @fontWeightNormal;
    .applyMaxLines(@applyMaxLines; @lineHeightSubtitle);
}

// Body Copy
.textbase-body(@applyMaxLines: false; @applyAdjustment: true) {
    font-size: @fontSizeBody;
    line-height: @lineHeightBody;

    .setRemProperty(font-size; @fontSizeBody);
    .setRemProperty(line-height; @lineHeightBody);

    .applyAscenderDescenderAdjustment(@applyAdjustment, @fontSizeBody, @lineHeightBody);

    font-weight: @fontWeightNormal;
    .applyMaxLines(@applyMaxLines; @lineHeightBody);
}

.textbase-base(@applyMaxLines: false; @applyAdjustment: true) {
    font-size: @fontSizeBase;
    line-height: @lineHeightBase;

    .setRemProperty(font-size; @fontSizeBase);
    .setRemProperty(line-height; @lineHeightBase);

    .applyAscenderDescenderAdjustment(@applyAdjustment, @fontSizeBase, @lineHeightBase);

    font-weight: @fontWeightSemiBold;
    .applyMaxLines(@applyMaxLines; @lineHeightBase);
}

// Captions
.textbase-caption(@applyMaxLines: false; @applyAdjustment: true) {
    font-size: @fontSizeCaption;
    line-height: @lineHeightCaption;

    .setRemProperty(font-size; @fontSizeCaption);
    .setRemProperty(line-height; @lineHeightCaption);

    .applyAscenderDescenderAdjustment(@applyAdjustment, @fontSizeCaption, @lineHeightCaption);

    font-weight: @fontWeightNormal;
    .applyMaxLines(@applyMaxLines; @lineHeightCaption);
}

.textbase-captionAlt(@applyMaxLines: false; @applyAdjustment: true) {
    font-size: @fontSizeCaptionAlt;
    line-height: @lineHeightCaptionAlt;

    .setRemProperty(font-size; @fontSizeCaptionAlt);
    .setRemProperty(line-height; @lineHeightCaptionAlt);

    .applyAscenderDescenderAdjustment(@applyAdjustment, @fontSizeCaptionAlt, @lineHeightCaptionAlt);

    font-weight: @fontWeightNormal;
    .applyMaxLines(@applyMaxLines; @lineHeightCaptionAlt);
}

.textbase-subcaption(@applyMaxLines: false; @applyAdjustment: true) {
    font-size: @fontSizeSubcaption;
    line-height: @lineHeightSubcaption;

    .setRemProperty(font-size; @fontSizeSubcaption);
    .setRemProperty(line-height; @lineHeightSubcaption);

    .applyAscenderDescenderAdjustment(@applyAdjustment, @fontSizeSubcaption, @lineHeightSubcaption);

    font-weight: @fontWeightNormal;
    .applyMaxLines(@applyMaxLines; @lineHeightSubcaption);
}

//-----------------------------------------------------------------------------
// Textbase Mixin Definitions: Deprecated
//-----------------------------------------------------------------------------
// Headers
.textbase-display1(@applyMaxLines: false; @applyAdjustment: true) { // Deprecated
    .textbase-headline(@applyMaxLines; @applyAdjustment);
}

.textbase-display2(@applyMaxLines: false; @applyAdjustment: true) { // Deprecated
    .textbase-header(@applyMaxLines; @applyAdjustment);
}

.textbase-display3(@applyMaxLines: false; @applyAdjustment: true) { // Deprecated
    .textbase-subheader(@applyMaxLines; @applyAdjustment);
}

// Titles
.textbase-title1(@applyMaxLines: false; @applyAdjustment: true) { // Deprecated
    font-size: @fontSizeTitle1;
    line-height: @lineHeightTitle1;

    .setRemProperty(font-size; @fontSizeTitle1);
    .setRemProperty(line-height; @lineHeightTitle1);

    .applyAscenderDescenderAdjustment(@applyAdjustment, @fontSizeTitle1, @lineHeightTitle1);

    font-weight: @fontWeightNormal;
    .applyMaxLines(@applyMaxLines; @lineHeightTitle1);
}

.textbase-title2(@applyMaxLines: false; @applyAdjustment: true) { // Deprecated
    font-size: @fontSizeTitle2;
    line-height: @lineHeightTitle2;

    .setRemProperty(font-size; @fontSizeTitle2);
    .setRemProperty(line-height; @lineHeightTitle2);

    .applyAscenderDescenderAdjustment(@applyAdjustment, @fontSizeTitle2, @lineHeightTitle2);

    font-weight: @fontWeightLight;
    .applyMaxLines(@applyMaxLines; @lineHeightTitle2);
}

.textbase-title3(@applyMaxLines: false; @applyAdjustment: true) { // Deprecated
   .textbase-subtitle(@applyMaxLines; @applyAdjustment);
}

// Body Copy
.textbase-body1(@applyMaxLines: false; @applyAdjustment: true) { // Deprecated
    .textbase-body(@applyMaxLines; @applyAdjustment);
}

.textbase-body2(@applyMaxLines: false; @applyAdjustment: true) { // Deprecated
    .textbase-base(@applyMaxLines; @applyAdjustment);
}

// Captions
.textbase-caption1(@applyMaxLines: false; @applyAdjustment: true) { // Deprecated
    .textbase-caption(@applyMaxLines; @applyAdjustment);
}

.textbase-caption2(@applyMaxLines: false; @applyAdjustment: true) { // Deprecated
    .textbase-captionAlt(@applyMaxLines; @applyAdjustment);
}

.textbase-caption3(@applyMaxLines: false; @applyAdjustment: true) { // Deprecated
    .textbase-subCaption(@applyMaxLines; @applyAdjustment);
}